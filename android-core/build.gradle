ext {
    kitDescription = 'Core mParticle SDK supporting only server-side integrations.'
}

apply plugin: 'com.android.library'
apply from: '../scripts/maven.gradle'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    String url = "\"\"";
    String configurationUrl = "\"\"";
    try {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (properties.stringPropertyNames().contains('mp.url')) {
            url = properties.getProperty('mp.url')
        }
        if (properties.stringPropertyNames().contains('mp.configurl')) {
            configurationUrl = properties.getProperty('mp.configurl')
        }
    }catch (Exception e){

    }

    def gitHash = "git rev-parse --short HEAD".execute().text.trim()

    if (gitHash == null || gitHash.length() == 0) {
        gitHash = System.getenv("MP_GIT_SHA").substring(0, 7)
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 14
        versionName project.version.toString().replace("-SNAPSHOT", "")
        versionCode Integer.parseInt(new Date().format('yyyyMMdd'))

        buildConfigField "String", "GIT_SHA", "\"$gitHash\""
        buildConfigField "String", "MP_URL", url
        buildConfigField "String", "MP_CONFIG_URL", configurationUrl
        buildConfigField "Boolean", "MP_DEBUG", "false"
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "Boolean", "MP_DEBUG", "true"
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard.pro'

            consumerProguardFiles 'consumer-proguard.pro'
            //buildConfigField "Boolean", "MP_DEBUG", "true"
        }
    }

}

task coreSdkJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        source += 'build/generated/source/buildConfig/release/'
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        title = 'mParticle Android SDK API Reference'
        failOnError false
        exclude {
            String filePath = it.toString()
            filePath.contains('/com/mparticle/internal/') ||
                    filePath.contains('/com/mparticle/kits/')
        }
        getOptions().setNoTimestamp(true)
}

dependencies {
    provided 'com.google.android.gms:play-services-gcm:[7.0,)'
    provided 'com.google.android.gms:play-services-ads:[7.0,)'
    provided 'com.google.firebase:firebase-messaging:[7.0,)'
    provided 'com.android.support:support-v4:[26.0, )'
    testCompile 'junit:junit:4.12'
    testCompile  files('libs/java-json.jar')
    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.6.2"
    testCompile "org.powermock:powermock-core:1.6.2"
}

configurations {
    lintJarImport
}

dependencies {
    lintJarImport project(path: ":custom-lint-rules", configuration: "lintChecks")
}


task copyLintJar(type: Copy) {

    from(configurations.lintJarImport) {
        rename {
            String fileName ->
                'lint.jar'
        }
    }
    into 'build/intermediates/lint/'
}


project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}

task printSDkVersion {
    doLast { 
        println project.version
    }
}
